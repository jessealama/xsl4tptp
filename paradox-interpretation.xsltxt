stylesheet "1.0";
import "render-tptp.xsl";
output method="text";

//////////////////////////////////////////////////////////////////////
// Stylesheet parameters
//////////////////////////////////////////////////////////////////////

// If '1', any function symbol whose name starts with skolem-prefix
// will be ignored.  (See the skolem-prefix stylesheet parameter.)
#ignore-skolems = { "1"; }

// Any function starting with this prefix will be considered a skolem
// function.
#skolem-prefix = { "sK"; }

// If we are not ignoring skolems, and this is '1', we will print them
// last.  If we are not ignoring skolems and this is not '1', then
// skolems will be presented in whatever order they appear in in the
// given interpretation.  (If we are ignoring skolems, the value of
// this variable is immaterial.)
#skolems-last = { "1"; }

#splitting-prefix = { "sP"; }

// If '1', any false predicate will be ignored.
#no-false = { "0"; }

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

tpl [/] {
  if [tstp] {
    apply [tstp];
  } else {
    msg terminate="yes" "Error: the required tstp document element is missing.";
  }
}

tpl [tstp[not(formula[@name = "domain"])]] {
  msg terminate="yes" "Error: the required domain formula is missing.";
}

tpl print-name-and-arity {
  $arity = `count (*)`;
  $n = `@name`;
  `concat ($n, " (arity ", $arity, ")")`;
}

tpl print-function-name-and-arity {
  for-each [descendant::function[1]] {
    print-name-and-arity ();
  }
}

tpl print-predicate-name-and-arity {
  for-each [descendant::predicate[1]] {
    print-name-and-arity ();
  }
}

tpl print-signature {
  "Signature:"; "\n";
  if [formula[@status = "fi_predicates"]] {
    "Predicates:"; "\n";
     for-each [formula[@status = "fi_predicates"
                       and not(starts-with (@name, $splitting-prefix))]] {
       print-predicate-name-and-arity (); "\n";
     }
  } else {
    "Predicates: (none, though equality may be implicitly present)"; "\n";
  }

  "\n";

  if [formula[@status = "fi_functors"]] {
    "Functions:"; "\n";
    if [$ignore-skolems = "1"] {
      for-each [formula[@status = "fi_functors"
                        and not(starts-with (@name, $skolem-prefix))
                        and not(starts-with (@name, $splitting-prefix))]] {
        print-function-name-and-arity (); "\n";
      }
    } else {
      for-each [formula[@status = "fi_functors"
                        and not(starts-with (@name, $splitting-prefix))]] {
        print-function-name-and-arity (); "\n";
      }
    }
  } else {
    "Functions/constants: (none)"; "\n";
  }

  "\n";
}

tpl [tstp[formula[@name = "domain"]]] {
  apply [formula[@name = "domain"]]; "\n";

  print-signature ();

  if [formula[@status = "fi_predicates"]] {
    for-each [formula[@status = "fi_predicates"
                      and not(starts-with (@name, $splitting-prefix))]] {
      apply [.];
    }
  }
  if [formula[@status = "fi_functors"]] {
    choose {
      when [$ignore-skolems = "1"] {
        apply [formula[@status = "fi_functors"
                       and not(starts-with (@name, $skolem-prefix))
                       and not(starts-with (@name, $splitting-prefix))]];
      }
      when [$skolems-last = "1"] {
        apply [formula[@status = "fi_functors"
                       and not(starts-with (@name, $skolem-prefix))
                       and not(starts-with (@name, $splitting-prefix))]];
        apply [formula[@status = "fi_functors"
                       and starts-with (@name, $skolem-prefix)
                       and not(starts-with (@name, $splitting-prefix))]];
      }
      otherwise {
        apply [formula[@status = "fi_functors"]];
      }
    }
  }
}

tpl print-domain {
  for-each [quantifier[@type = "universal"]] {
    for-each [*[position() = last()]] {
      choose {
        when [self::disjunction] {
          for-each [predicate[@name = "="]] {
            apply [.] mode="emit-rhs";
            if [position() < last()] {
              ", ";
            }
          }
          "\n";
        }
        when [self::predicate] {
          apply [.] mode="emit-rhs";
          "\n";
        }
        otherwise {
          msg terminate="yes" "Error: unable to handle a domain formula whose matrix is neither an atom nor a disjunction.";
        }
      }
    }
  }
}

tpl [formula[@name = "domain" and quantifier[@type = "universal"]]] {
  "Domain: ";
  print-domain ();
}

tpl [formula[@name = "domain" and not(quantifier[@type = "universal"])]] {
  msg terminate="yes" "Error: the domain formula does not have the expected shape (universal quantification).";
}

tpl maybe-print-statement {
  if [$no-false = "1"] {
    if [self::equivalence and *[2][self::defined-predicate[@name = "false"]]] {
      ""; // nothing
    } else {
      apply [.]; "\n";
    }
  } else {
    apply [.]; "\n";
  }
}

tpl [formula[@status = "fi_predicates"]] {
  `@name`; "\n";
  for-each [*[1]] {
    if [self::conjunction] {
      if [$no-false = "1"] {
        if [descendant::equivalence[*[2][self::defined-predicate[@name = "true"]]]] {
          for-each [descendant::*[not(self::conjunction) and parent::conjunction]] {
            maybe-print-statement ();
          }
        } else {
          "  "; "(no true instances)"; "\n";
        }
      } else {
        for-each [descendant::*[not(self::conjunction) and parent::conjunction]] {
          maybe-print-statement ();
        }
      }
    } else {
      maybe-print-statement ();
    }
  }
  "\n";
}

tpl [formula[@status = "fi_functors"]] {
  `@name`; "\n";
  for-each [*[1]] {
    if [self::conjunction] {
      for-each [descendant::*[not(self::conjunction) and parent::conjunction]] {
        maybe-print-statement ();
      }
    } else {
      maybe-print-statement ();
    }
  }
  "\n";
}

tpl [equivalence[*[2][self::defined-predicate[@name = "true"]]]] {
  "  "; apply [*[1]];
}

tpl [equivalence[*[2][self::defined-predicate[@name = "false"]]]] {
  if [$no-false = "1"] {
    ""; // nothing
  } else {
    "~ "; apply [*[1]];
  }
}

tpl [predicate[@name = "="]] {
  apply [*[1]]; " = "; apply [*[2]];
}

tpl [*] mode="emit-rhs" {
  if [count (*) = 2] {
    apply [*[2]];
  } else {
    msg terminate="yes" "Error: we cannot print the right-hand side of an element that does not have exactly two children.";
  }
}
