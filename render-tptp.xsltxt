stylesheet "1.0";
include "utils/die.xsl";
include "utils/list.xsl";
output method="text";

//////////////////////////////////////////////////////////////////////
// Variables
//////////////////////////////////////////////////////////////////////

$newline = `'&#10;'`;

//////////////////////////////////////////////////////////////////////
// Templates
//////////////////////////////////////////////////////////////////////

// If we don't handle something explicitly, we don't handle it at all.
tpl [*] {
  $n = `name (.)`;
  $message = `concat ("Error: we have arrived at an unhandled ", $n, " node.")`;
  apply [.] (#message = $message) mode="die";
}

tpl [/] {
  if [tstp] {
    apply [tstp];
  } else {
    msg terminate="yes" "Error: the required tstp document element is missing.";
  }
}

tpl [tstp] {
  for-each [node()] {
    apply [.];
    if [self::text()] {
      // nothing
    } else {
      "\n";
    }
  }
}

tpl [comment] {
  for-each [text()] {
    $s = `.`;
    $c = chomp (#s = $s);
    msg `concat ("before chomping:", "\n", $s, "\n", "after chomping:", "\n", $c)`;
    emit-percents (#s = $c);
  }
}

// if the string starts with a newline, delete it
tpl chomp-front (#s) {
  if [starts-with ($s, $newline)] {
    `substring-after ($s, $newline)`;
  } else {
    $s;
  }
}

tpl chomp-tail (#s) {
  if [contains ($s, $newline)] {
    $before = `substring-before ($s, $newline)`;
    $after = `substring-after ($s, $newline)`;
    if [contains ($after, $newline)] {
      $chomped = chomp-tail (#s = $after);
      `concat ($before, $newline, $chomped)`;
    } else {
      if [$after = ""] {
        `$before`;
      } else {
        `concat ($before, $newline, $after)`;
      }
    }
  } else {
    $s;
  }
}

tpl chomp (#s) {
  $front = chomp-front (#s = $s);
  chomp-tail (#s = $front);
}

tpl emit-percents (#s) {
  if [contains ($s, $newline)] {
    $before = `substring-before ($s, $newline)`;
    $after = `substring-after ($s, $newline)`;
    $emit-after = emit-percents (#s = $after);
    `concat ("%", $before, $newline, $emit-after)`;
  } else {
    `concat ("%", $s)`;
  }
}

tpl [text()] {
  `.`;
}

tpl [formula[@syntax = "formula" and @status and @name]] {
  "fof(";
    `@name`; ",";
    `@status`; ",";
    apply [*[1]];
    if [source] {
      apply [source];
    }
    if [useful-info] {
      apply [useful-info];
    }
    ")"; ".";
}

tpl [formula[@syntax = "clause" and @status and @name]] {
  "cnf(";
    `@name`; ",";
    `@status`; ",";
    apply [*[1]];
    if [source] {
      apply [source];
    }
    if [useful-info] {
      apply [useful-info];
    }
    ")"; ".";
}

tpl [number[@name]] {
  `@name`;
}

tpl [non-logical-data[@name and (non-logical-data or number)]] {
  `@name`; "("; list (#separ = ",", #elems = `non-logical-data | number`); ")";
}

tpl [non-logical-data[@name and not(non-logical-data or number)]] {
  `@name`;
}

tpl [non-logical-data[not(@name) and (non-logical-data or number)]] {
  "["; list (#separ = ",", #elems = `non-logical-data | number`); "]";
}

tpl [non-logical-data[not(@name) and not(non-logical-data) and not(number)]] {
  "[]";
}

tpl [source] {
  choose {
    when [non-logical-data and number] {
      ","; "["; list (#separ = ",", #elems = `non-logical-data | number`); "]";
    }
    when [non-logical-data[@name]] {
      ","; apply [non-logical-data[@name]];
    }
    when [number] {
      ","; apply [number];
    }
    otherwise {
      "";
    }
  }
}

tpl [useful-info] {
  choose {
    when [non-logical-data[@name]] {
      ","; apply [non-logical-data[@name]];
    }
    when [non-logical-data[not(@name)] or number] {
      ","; "["; list (#separ = ",", #elems = `non-logical-data | number`); "]";
    }
    when [number] {
      ","; apply [number];
    }
    otherwise {
      "";
    }
  }
}

//////////////////////////////////////////////////////////////////////
// Formulas proper
//////////////////////////////////////////////////////////////////////

tpl [disjunction] {
 "("; apply [*[1]]; " | "; apply [*[2]]; ")";
}

tpl [conjunction] {
 "("; apply [*[1]]; " & "; apply [*[2]]; ")";
}

tpl [implication] {
 "("; apply [*[1]]; " => "; apply [*[2]]; ")";
}

tpl [reverse-implication] {
 "("; apply [*[1]]; " <= "; apply [*[2]]; ")";
}

tpl [equivalence] {
 "("; apply [*[1]]; " <=> "; apply [*[2]]; ")";
}

tpl [nonequivalence] {
 "("; apply [*[1]]; " <~> "; apply [*[2]]; ")";
}

tpl [predicate[@name = "="]] {
  "("; apply [*[1]]; " = "; apply [*[2]]; ")";
}

tpl [predicate[@name and not(@name = "=")]] {
  if [*] {
    `@name`; "("; list (#separ = ",", #elems = `*`); ")";
  } else {
    `@name`;
  }
}

tpl [negation] {
  "~ "; apply [*[1]];
}

tpl [quantifier[@type = "universal"]] {
  "(! ";
    "[";list (#separ = ",", #elems = `variable`); "]";
    " : ";
    apply [*[position() = last()]];
  ")";
}

tpl [quantifier[@type = "existential"]] {
  "(? ";
    "[";list (#separ = ",", #elems = `variable`); "]";
    " : "; apply [*[position() = last()]];
  ")";
}

tpl [defined-predicate[@name = "false"]] {
  "$false";
}

tpl [defined-predicate[@name = "true"]] {
  "$true";
}

//////////////////////////////////////////////////////////////////////
// Terms
//////////////////////////////////////////////////////////////////////

tpl [function[@name]] {
  if [*] {
    `@name`; "("; list (#separ = ",", #elems = `*`); ")";
  } else {
    `@name`;
  }
}

tpl [variable[@name]] {
  `@name`;
}

//////////////////////////////////////////////////////////////////////
// Strings
//////////////////////////////////////////////////////////////////////

tpl [string[@name]] {
  $n = `@name`;
  `concat ("'", $n, "'")`;
}